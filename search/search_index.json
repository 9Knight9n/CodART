{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CodART Automated Source Code Refactoring Toolkit By: Morteza Zakeri \u2020 \u2020 Ph.D. Student, Iran University of Science and Technology, Tehran, Iran (m-zakeri@live.com). Version 0.1.0 (8 November 2020) \u251c Download PDF version Abstract\u2014 Software refactoring is performed by changing the software structure without modifying its external behavior. Many software quality attributes can be enhanced through the source code refactoring, such as reusability, flexibility, understandability, and testability. Refactoring engines are tools that automate the application of refactorings: first, the user chooses a refactoring to apply, then the engine checks if the transformation is safe, and if so, transforms the program. Refactoring engines are a key component of modern Integrated Development Environments (IDEs), and programmers rely on them to perform refactorings. In this project, an open-source software toolkit for refactoring Java source codes, namely CodART, will be developed. ANTLR parser generator is used to create and modify the program syntax-tree and produce the refactored version of the program. To the best of our knowledge, CodART is the first open-source refactoring toolkit based on ANTLR. Index Terms: Software refactoring, refactoring engine, search-based refactoring, ANTLR, Java. 1 Introduction R efactoring is a behavior-preserving program transformation that improves the design of a program. Refactoring engines are tools that automate the application of refactorings. The programmer need only select which refactoring to apply, and the engine will automatically check the preconditions and apply the transformations across the entire program if the preconditions are satisfied. Refactoring is gaining popularity, as evidenced by the inclusion of refactoring engines in modern IDEs such as IntelliJ IDEA , Eclipse , or NetBeans for Java. Considering the EncapsulateField refactoring as an illustrative example. This refactoring replaces all references to a field with accesses through setter and getter methods. The EncapsulateField refactoring takes as input the name of the field to encapsulate and the names of the new getter and setter methods. It performs the following transformations: Creates a public getter method that returns the field's value, Creates a public setter method that updates the field's value, to a given parameter's value, Replaces all field reads with calls to the getter method, Replaces all field writes with calls to the setter method, Changes the field's access modifier to private. The EncapsulateField refactoring checks several preconditions, including that the code does not already contain accessor methods and that these methods are applicable to the expressions in which the field appears. Figure 1 shows a sample program before and after encapsulating the field f into the getF and setF methods. Figure 1. Example EncapsulateField refactoring Refactoring engines must be reliable. A fault in a refactoring engine can silently introduce bugs in the refactored program and lead to challenging debugging sessions. If the original program compiles, but the refactored program does not, the refactoring is obviously incorrect and can be easily undone. However, if the refactoring engine erroneously produces a refactored program that compiles but does not preserve the semantics of the original program, this can have severe consequences. To perform refactoring correctly, the tool has to operate on the syntax tree of the code, not on the text. Manipulating the syntax tree is much more reliable to preserve what the code is doing. Refactoring is not just understanding and updating the syntax tree. The tool also needs to figure out how to rerender the code into text back in the editor view, called code transformation. All in all, implementing decent refactoring is a challenging programming exercise, required compiler knowledge. In this project, we want to develop CodART, a toolkit for applying a given refactoring on the source code and obtain the refactored code. To this aim, we will use ANTLR [1] to generate and modify the program syntax tree. CodART development consists of two phases: In the first phase, 42 common refactoring operations will be automated, and in the second phase, an algorithm to find the best sequence of refactorings to apply on a given software will be developed using many-objective search-based approaches. Section 2 describes the refactoring operations in detail. Section 3 discusses the search-based refactoring and many-objective evolutionary algorithms. Section 4 explains the implementation phases, dataset, developers' team arrangement, and grading policy. Conclusion and future works are discussed in Section 5. 2 Refactoring operations This section explains the refactoring operations used in the project. A catalog of 72 refactoring operations has been proposed by Fowler [2]. Each refactoring operation has a definition and is clearly specified by the entities in which it is involved and the role of each. Table 1 describes the desirable refactorings, which we aim to automate them. It worth noting that not all of these refactoring operations are introduced by Fowler [2]. A concrete example for most of the refactoring operations in the table is available at https://refactoring.com/catalog/ . Examples of other refactorings can be found at https://refactoring.guru/refactoring/techniques and https://sourcemaking.com/refactoring/refactorings . Table 1. Refactoring operations Refactoring Definition Entities Roles Move class Move a class from a package to another package class source package, target package moved class Move method Move a method from a class to another. class method source class, target class moved method Merge packages Merge the elements of a set of packages in one of them package source package, target package Extract/Split package Add a package to compose the elements of another package package source package, target package Extract class Create a new class and move fields and methods from the old class to the new one class method source class, new class moved methods Extract method Extract a code fragment into a method method statement source method, new method moved statements Inline class Move all features of a class in another one and remove it class source class, target class Move field Move a field from a class to another class field source class, target class field Push down field Move a field of a superclass to a subclass class field super class, sub classes move field Push down method Move a method of a superclass to a subclass class method super class, sub classes moved method Pull up field Move a field from subclasses to the superclass class field sub classes, super class moved field Pull up method Move a method from subclasses to the superclass class method sub classes, super class moved method Increase field visibility Increase the visibility of a field from public to protected, protected to package or package to private Decrease field visibility Decrease the visibility of a field from private to package, package to protected or protected to public Make field final Make a non-final field final Make field non-final Make a final field non-final Make field static Make a non-static field static Make field non-static Make a static field non-static Remove field Remove a field from a class Increase method visibility Increase the visibility of a method from public to protected, protected to package or package to private Decrease method visibility Decrease the visibility of a method from private to package, package to protected or protected to public Make method final Make a non-final method final Make method non-final Make a final method non-final Make method static Make a non-static method static Make method non- static Make a static method non-static Remove method Remove a method from a class Make class-final Make a non-final class final Make class non-final Make a final class non-final Make class abstract Change a concrete class to abstract Make class concrete Change an abstract class to concrete Extract subclass Create a subclass for a set of features Extract interface Extract methods of a class into an interface Inline method Move the body of a method into its callers and remove the method Collapse hierarchy Merge a superclass and a subclass Remove control flag Replace control flag with break Replace nested conditional with guard clauses Replace nested conditional with guard clauses Replace constructor with factory function Replace constructor with factory function Replace exception with test Replace exception with precheck Rename field Rename a field Rename method Rename a method Rename class Rename a class Rename package Rename a package 3 Search-based refactoring After refactoring operations were automated, we must decide which refactorings souled be performed in order to elevate software quality. The concern about using refactoring operations in Table 1 is whether each one of them has a positive impact on the refactored code quality or not. Finding the right sequence of refactorings to be applied in a software artifact is considered a challenging task since there is a wide range of refactorings. The ideal sequence is, therefore, must correlate to different quality attributes to be improved as a result of applying refactorings. Finding the best refactoring sequence is an optimization problem that can be solved by search techniques in the field known as Search-Based Software Engineering (SBSE) [3]. In this approach, refactorings are applied stochastically to the original software solution, and then the software is measured using a fitness function consisting of one or more software metrics. There are various metric suites available to measure characteristics like cohesion and coupling, but different metrics measure the software in different ways, and thus how they are applied will have a different effect on the outcome. The second phase of this project is to use a many-objective search algorithm to find the best sequence of refactoring on a given project. Recently, many-objective SBSE approach for refactoring [3]\u2013[5] and remodularization, regrouping a set of classes C in terms of packages P, [6] has gained more attention due to its ability to find the best sequence of refactoring operations which is led to the improvement in software quality. Therefore, we first focus on implementing the proposed approach approaches in [3], [5], [6] as fundamental works in this area. Then, we will improve their approach. As a new contribution, we add new refactoring operations and new objective functions to improve the quality attribute of the software. We also evaluate our method on the new software projects which are not used in previous works. 4 Code smells 4 Implementation This section describes two phases of the project: Refactoring automation with ANTLR parser generator and refactoring recommendation through many-objective search-based refactoring. 4.1 Refactoring automation Each refactoring operation in Table 1 is implemented as an API, with the refactoring name. The API receives the involved entities with their refactoring roles and other required data as inputs, checks the feasibility of the refactoring using refactoring preconditions described in [2], performs the refactoring if it is feasible, and returns the refactored code or return null if the refactoring is not feasible. The core of our refactoring engine is a syntax-tree modification algorithm. Fundamentally, ANTLR is used to generate and modify the syntax-tree of a given program. Each refactoring API is an ANTLR Listener or visitor class, which required argument by its constructor and preform refactoring when call by parse-tree walker object. The refactoring target and input parameters must read from a configuration file, which can be expressed in JSON, XML, or YAML formats. The key to use ANTLR for refactoring tasks is the TokenStreamRewriter object that knows how to give altered views of a token stream without actually modifying the stream. It treats all of the manipulation methods as \"instructions\" and queues them up for lazy execution when traversing the token stream to render it back as text. The rewriter executes those instructions every time we call getText() . This strategy is very effective for the general problem of source code instrumentation or refactoring. The TokenStreamRewriter is a powerful and extremely efficient means of manipulating a token stream. 4.2 Refactoring recommendation A solution consists of a sequence of n refactoring operations applied to different code elements in the source code to fix. In order to represent a candidate solution (individual/chromosome), we use a vector-based representation. Each vector\u2019s dimension represents a refactoring operation where the order of applying these refactoring operations corresponds to their positions in the vector. The initial population is generated by randomly assigning a sequence of refactorings to some code fragments. Each generated refactoring solution is executed on the software system S . Once all required data is computed, the solution is evaluated based on the quality of the resulting design. 4.3 Dataset Refactorings are applied to software systems listed in Table 2. Datasets may change in the future. We use a set of well-known open-source Java projects that have been investigated in previous works and also add new Java software projects. Table 2. Software systems refactored in this project System Release Previous releases Domain Reference [Xerces-J] v2.7.0 software packages for parsing XML [3], [6] [Azureus] v2.3.0.6 Java BitTorrent client for handling multiple torrents [3] [ArgoUML] v0.26 and v0.3 UML tool for object-oriented design [3] [Apache Ant] v1.5.0 and v1.7.0 Java build tool and library [3] [GanttProject] v1.10.2 and v1.11.1 project management [3], [6], [5] [JHotDraw] v6.1 and v6.0b1 and v5.3 graphics tool [6], [5], [4] [JFreeChart] v1.0.9 chart tool [6] [Beaver] v0.9.11 and v0.9.8 parser generator [5], [4] [Apache XML-RPC] v3.1.1 B2B communications [5], [4] [JRDF] v0.3.4.3 semantic web (resource management) [5] [XOM] v1.2.1 XML tool [5] [JSON] v1.1 software packages for parsing JSON [4] [JFlex] v1.4.1 lexical analyzer generator [4] [Mango] v [4] [Weka] v3.9 data mining tool New [ANTLR] v4.8.0 parser generator tool New 4.4 Agenda Students must form groups of up to three persons, and each group must implement several refactoring operations. The exact list of refactoring will be assigned to each group subsequently. The refactoring operations in Table 1 may update during the semester. As an example of refactoring automation, we have implemented the EncapsulateField refactoring, illustrated in Figure 1. A na\u00efve implementation is available on the project official Github page at https://m-zakeri.github.io/CodART . In addition, 26 refactoring operations in Table 1 have been implemented by MultiRefactor [7] based on RECODER , three of them have been implemented by JDeodrant [8], and other operations have been automated in [3], [6]. RECODER extracts a model of the code that can be used to analyze and modify the code before the changes are applied and written to file. The tool takes Java source code as input and will output the modified source code to a specified folder. The input must be fully compilable and must be accompanied by any necessary library files as compressed jar files. 4.5 Grading policy Table 3. Grading policy Table 3 shows the grading policy. Grading policy may change in the future. Action Score (100) Refactoring operations implementation 40 Search-based refactoring recommendation 30 Evaluation of the tool on a real dataset 20 Documentations 10 Improving the state-of-the-arts papers 30+ (extra bonus) 5 Conclusion Software refactoring is used to reduce the costs and risks of software evolution. Automated software refactoring tools can reduce risks caused by manual refactoring, improve efficiency, and reduce software refactoring difficulties. Researchers have made great efforts to research how to implement and improve automated software refactoring tools. However, the results of automated refactoring tools often deviate from the intentions of the implementer. The goal of this project is to propose an open-source refactoring engine and toolkit that can automatically find the best refactoring sequence required for a given software and apply this sequence. Since the tool is work based on compiler principles, it is reliable to be used in practice and has many benefits for software developer companies. Students who participate in the project will learn compiler techniques such as lexing, parsing, source code analysis, and source code transformation. They also learn about software refactoring, search-based software engineering, optimization, software quality, and object-orient metrics. Conflict of interest The project is supported by the (IUST Reverse Engineering Research Laboratory)[http://reverse.iust.ac.ir]. Interested students may continue working on this project to fulfill their final bachelor and master thesis or their internship. References [1] T. Parr and K. Fisher, \u201cLL(*): the foundation of the ANTLR parser generator,\u201d Proc. 32nd ACM SIGPLAN Conf. Program. Lang. Des. Implement., pp. 425\u2013436, 2011. [2] M. K. B. Fowler, Refactoring: improving the design of existing code, Second Edi. Addison-Wesley, 2018. [3] M. W. Mkaouer, M. Kessentini, S. Bechikh, M. O\u0301 Cinne\u0301ide, and K. Deb, \u201cOn the use of many quality attributes for software refactoring: a many-objective search-based software engineering approach,\u201d Empir. Softw. Eng., vol. 21, no. 6, pp. 2503\u20132545, Dec. 2016. [4] M. Mohan, D. Greer, and P. McMullan, \u201cTechnical debt reduction using search based automated refactoring,\u201d J. Syst. Softw., vol. 120, pp. 183\u2013194, Oct. 2016. [5] M. Mohan and D. Greer, \u201cUsing a many-objective approach to investigate automated refactoring,\u201d Inf. Softw. Technol., vol. 112, pp. 83\u2013101, Aug. 2019. [6] W. Mkaouer et al., \u201cMany-Objective Software Remodularization Using NSGA-III,\u201d ACM Trans. Softw. Eng. Methodol., vol. 24, no. 3, pp. 1\u201345, May 2015. [7] M. Mohan and D. Greer, \u201cMultiRefactor: automated refactoring to improve software quality,\u201d 2017, pp. 556\u2013572. [8] N. Tsantalis, T. Chaikalis, and A. Chatzigeorgiou, \u201cTen years of JDeodorant: lessons learned from the hunt for smells,\u201d in 2018 IEEE 25th International Conference on Software Analysis, Evolution and Reengineering (SANER), 2018, pp. 4\u201314. Related links IUST compiler course official webpage ANTLR slides: PART 1: Introduction ANTLR slides: PART 2: Getting started in Java ANTLR slides: PART 3: Getting started in C# Endnotes [1] https://www.jetbrains.com/idea/ [2] http://www.eclipse.org [3] http://www.netbeans.org [4] https://github.com/mmohan01/MultiRefactor [5] http://sourceforge.net/projects/recoder [6] http://reverse.iust.ac.ir Download Project Links for Test Xerces-J Azureus ArgoUML Apache Ant GanttProject JHotDraw JFreeChart Beaver Apache XML-RPC JRDF XOM JSON JFlex Mango Weka ANTLR FAQ For any question please contact m-zakeri@live.com","title":"CodART"},{"location":"#codart","text":"","title":"CodART"},{"location":"#automated-source-code-refactoring-toolkit","text":"By: Morteza Zakeri \u2020 \u2020 Ph.D. Student, Iran University of Science and Technology, Tehran, Iran (m-zakeri@live.com). Version 0.1.0 (8 November 2020) \u251c Download PDF version Abstract\u2014 Software refactoring is performed by changing the software structure without modifying its external behavior. Many software quality attributes can be enhanced through the source code refactoring, such as reusability, flexibility, understandability, and testability. Refactoring engines are tools that automate the application of refactorings: first, the user chooses a refactoring to apply, then the engine checks if the transformation is safe, and if so, transforms the program. Refactoring engines are a key component of modern Integrated Development Environments (IDEs), and programmers rely on them to perform refactorings. In this project, an open-source software toolkit for refactoring Java source codes, namely CodART, will be developed. ANTLR parser generator is used to create and modify the program syntax-tree and produce the refactored version of the program. To the best of our knowledge, CodART is the first open-source refactoring toolkit based on ANTLR. Index Terms: Software refactoring, refactoring engine, search-based refactoring, ANTLR, Java.","title":"Automated Source Code Refactoring Toolkit"},{"location":"#1-introduction","text":"R efactoring is a behavior-preserving program transformation that improves the design of a program. Refactoring engines are tools that automate the application of refactorings. The programmer need only select which refactoring to apply, and the engine will automatically check the preconditions and apply the transformations across the entire program if the preconditions are satisfied. Refactoring is gaining popularity, as evidenced by the inclusion of refactoring engines in modern IDEs such as IntelliJ IDEA , Eclipse , or NetBeans for Java. Considering the EncapsulateField refactoring as an illustrative example. This refactoring replaces all references to a field with accesses through setter and getter methods. The EncapsulateField refactoring takes as input the name of the field to encapsulate and the names of the new getter and setter methods. It performs the following transformations: Creates a public getter method that returns the field's value, Creates a public setter method that updates the field's value, to a given parameter's value, Replaces all field reads with calls to the getter method, Replaces all field writes with calls to the setter method, Changes the field's access modifier to private. The EncapsulateField refactoring checks several preconditions, including that the code does not already contain accessor methods and that these methods are applicable to the expressions in which the field appears. Figure 1 shows a sample program before and after encapsulating the field f into the getF and setF methods. Figure 1. Example EncapsulateField refactoring Refactoring engines must be reliable. A fault in a refactoring engine can silently introduce bugs in the refactored program and lead to challenging debugging sessions. If the original program compiles, but the refactored program does not, the refactoring is obviously incorrect and can be easily undone. However, if the refactoring engine erroneously produces a refactored program that compiles but does not preserve the semantics of the original program, this can have severe consequences. To perform refactoring correctly, the tool has to operate on the syntax tree of the code, not on the text. Manipulating the syntax tree is much more reliable to preserve what the code is doing. Refactoring is not just understanding and updating the syntax tree. The tool also needs to figure out how to rerender the code into text back in the editor view, called code transformation. All in all, implementing decent refactoring is a challenging programming exercise, required compiler knowledge. In this project, we want to develop CodART, a toolkit for applying a given refactoring on the source code and obtain the refactored code. To this aim, we will use ANTLR [1] to generate and modify the program syntax tree. CodART development consists of two phases: In the first phase, 42 common refactoring operations will be automated, and in the second phase, an algorithm to find the best sequence of refactorings to apply on a given software will be developed using many-objective search-based approaches. Section 2 describes the refactoring operations in detail. Section 3 discusses the search-based refactoring and many-objective evolutionary algorithms. Section 4 explains the implementation phases, dataset, developers' team arrangement, and grading policy. Conclusion and future works are discussed in Section 5.","title":"1 Introduction"},{"location":"#2-refactoring-operations","text":"This section explains the refactoring operations used in the project. A catalog of 72 refactoring operations has been proposed by Fowler [2]. Each refactoring operation has a definition and is clearly specified by the entities in which it is involved and the role of each. Table 1 describes the desirable refactorings, which we aim to automate them. It worth noting that not all of these refactoring operations are introduced by Fowler [2]. A concrete example for most of the refactoring operations in the table is available at https://refactoring.com/catalog/ . Examples of other refactorings can be found at https://refactoring.guru/refactoring/techniques and https://sourcemaking.com/refactoring/refactorings . Table 1. Refactoring operations Refactoring Definition Entities Roles Move class Move a class from a package to another package class source package, target package moved class Move method Move a method from a class to another. class method source class, target class moved method Merge packages Merge the elements of a set of packages in one of them package source package, target package Extract/Split package Add a package to compose the elements of another package package source package, target package Extract class Create a new class and move fields and methods from the old class to the new one class method source class, new class moved methods Extract method Extract a code fragment into a method method statement source method, new method moved statements Inline class Move all features of a class in another one and remove it class source class, target class Move field Move a field from a class to another class field source class, target class field Push down field Move a field of a superclass to a subclass class field super class, sub classes move field Push down method Move a method of a superclass to a subclass class method super class, sub classes moved method Pull up field Move a field from subclasses to the superclass class field sub classes, super class moved field Pull up method Move a method from subclasses to the superclass class method sub classes, super class moved method Increase field visibility Increase the visibility of a field from public to protected, protected to package or package to private Decrease field visibility Decrease the visibility of a field from private to package, package to protected or protected to public Make field final Make a non-final field final Make field non-final Make a final field non-final Make field static Make a non-static field static Make field non-static Make a static field non-static Remove field Remove a field from a class Increase method visibility Increase the visibility of a method from public to protected, protected to package or package to private Decrease method visibility Decrease the visibility of a method from private to package, package to protected or protected to public Make method final Make a non-final method final Make method non-final Make a final method non-final Make method static Make a non-static method static Make method non- static Make a static method non-static Remove method Remove a method from a class Make class-final Make a non-final class final Make class non-final Make a final class non-final Make class abstract Change a concrete class to abstract Make class concrete Change an abstract class to concrete Extract subclass Create a subclass for a set of features Extract interface Extract methods of a class into an interface Inline method Move the body of a method into its callers and remove the method Collapse hierarchy Merge a superclass and a subclass Remove control flag Replace control flag with break Replace nested conditional with guard clauses Replace nested conditional with guard clauses Replace constructor with factory function Replace constructor with factory function Replace exception with test Replace exception with precheck Rename field Rename a field Rename method Rename a method Rename class Rename a class Rename package Rename a package","title":"2 Refactoring operations"},{"location":"#3-search-based-refactoring","text":"After refactoring operations were automated, we must decide which refactorings souled be performed in order to elevate software quality. The concern about using refactoring operations in Table 1 is whether each one of them has a positive impact on the refactored code quality or not. Finding the right sequence of refactorings to be applied in a software artifact is considered a challenging task since there is a wide range of refactorings. The ideal sequence is, therefore, must correlate to different quality attributes to be improved as a result of applying refactorings. Finding the best refactoring sequence is an optimization problem that can be solved by search techniques in the field known as Search-Based Software Engineering (SBSE) [3]. In this approach, refactorings are applied stochastically to the original software solution, and then the software is measured using a fitness function consisting of one or more software metrics. There are various metric suites available to measure characteristics like cohesion and coupling, but different metrics measure the software in different ways, and thus how they are applied will have a different effect on the outcome. The second phase of this project is to use a many-objective search algorithm to find the best sequence of refactoring on a given project. Recently, many-objective SBSE approach for refactoring [3]\u2013[5] and remodularization, regrouping a set of classes C in terms of packages P, [6] has gained more attention due to its ability to find the best sequence of refactoring operations which is led to the improvement in software quality. Therefore, we first focus on implementing the proposed approach approaches in [3], [5], [6] as fundamental works in this area. Then, we will improve their approach. As a new contribution, we add new refactoring operations and new objective functions to improve the quality attribute of the software. We also evaluate our method on the new software projects which are not used in previous works.","title":"3 Search-based refactoring"},{"location":"#4-code-smells","text":"","title":"4 Code smells"},{"location":"#4-implementation","text":"This section describes two phases of the project: Refactoring automation with ANTLR parser generator and refactoring recommendation through many-objective search-based refactoring.","title":"4 Implementation"},{"location":"#41-refactoring-automation","text":"Each refactoring operation in Table 1 is implemented as an API, with the refactoring name. The API receives the involved entities with their refactoring roles and other required data as inputs, checks the feasibility of the refactoring using refactoring preconditions described in [2], performs the refactoring if it is feasible, and returns the refactored code or return null if the refactoring is not feasible. The core of our refactoring engine is a syntax-tree modification algorithm. Fundamentally, ANTLR is used to generate and modify the syntax-tree of a given program. Each refactoring API is an ANTLR Listener or visitor class, which required argument by its constructor and preform refactoring when call by parse-tree walker object. The refactoring target and input parameters must read from a configuration file, which can be expressed in JSON, XML, or YAML formats. The key to use ANTLR for refactoring tasks is the TokenStreamRewriter object that knows how to give altered views of a token stream without actually modifying the stream. It treats all of the manipulation methods as \"instructions\" and queues them up for lazy execution when traversing the token stream to render it back as text. The rewriter executes those instructions every time we call getText() . This strategy is very effective for the general problem of source code instrumentation or refactoring. The TokenStreamRewriter is a powerful and extremely efficient means of manipulating a token stream.","title":"4.1 Refactoring automation"},{"location":"#42-refactoring-recommendation","text":"A solution consists of a sequence of n refactoring operations applied to different code elements in the source code to fix. In order to represent a candidate solution (individual/chromosome), we use a vector-based representation. Each vector\u2019s dimension represents a refactoring operation where the order of applying these refactoring operations corresponds to their positions in the vector. The initial population is generated by randomly assigning a sequence of refactorings to some code fragments. Each generated refactoring solution is executed on the software system S . Once all required data is computed, the solution is evaluated based on the quality of the resulting design.","title":"4.2 Refactoring recommendation"},{"location":"#43-dataset","text":"Refactorings are applied to software systems listed in Table 2. Datasets may change in the future. We use a set of well-known open-source Java projects that have been investigated in previous works and also add new Java software projects. Table 2. Software systems refactored in this project System Release Previous releases Domain Reference [Xerces-J] v2.7.0 software packages for parsing XML [3], [6] [Azureus] v2.3.0.6 Java BitTorrent client for handling multiple torrents [3] [ArgoUML] v0.26 and v0.3 UML tool for object-oriented design [3] [Apache Ant] v1.5.0 and v1.7.0 Java build tool and library [3] [GanttProject] v1.10.2 and v1.11.1 project management [3], [6], [5] [JHotDraw] v6.1 and v6.0b1 and v5.3 graphics tool [6], [5], [4] [JFreeChart] v1.0.9 chart tool [6] [Beaver] v0.9.11 and v0.9.8 parser generator [5], [4] [Apache XML-RPC] v3.1.1 B2B communications [5], [4] [JRDF] v0.3.4.3 semantic web (resource management) [5] [XOM] v1.2.1 XML tool [5] [JSON] v1.1 software packages for parsing JSON [4] [JFlex] v1.4.1 lexical analyzer generator [4] [Mango] v [4] [Weka] v3.9 data mining tool New [ANTLR] v4.8.0 parser generator tool New","title":"4.3 Dataset"},{"location":"#44-agenda","text":"Students must form groups of up to three persons, and each group must implement several refactoring operations. The exact list of refactoring will be assigned to each group subsequently. The refactoring operations in Table 1 may update during the semester. As an example of refactoring automation, we have implemented the EncapsulateField refactoring, illustrated in Figure 1. A na\u00efve implementation is available on the project official Github page at https://m-zakeri.github.io/CodART . In addition, 26 refactoring operations in Table 1 have been implemented by MultiRefactor [7] based on RECODER , three of them have been implemented by JDeodrant [8], and other operations have been automated in [3], [6]. RECODER extracts a model of the code that can be used to analyze and modify the code before the changes are applied and written to file. The tool takes Java source code as input and will output the modified source code to a specified folder. The input must be fully compilable and must be accompanied by any necessary library files as compressed jar files.","title":"4.4 Agenda"},{"location":"#45-grading-policy","text":"Table 3. Grading policy Table 3 shows the grading policy. Grading policy may change in the future. Action Score (100) Refactoring operations implementation 40 Search-based refactoring recommendation 30 Evaluation of the tool on a real dataset 20 Documentations 10 Improving the state-of-the-arts papers 30+ (extra bonus)","title":"4.5 Grading policy"},{"location":"#5-conclusion","text":"Software refactoring is used to reduce the costs and risks of software evolution. Automated software refactoring tools can reduce risks caused by manual refactoring, improve efficiency, and reduce software refactoring difficulties. Researchers have made great efforts to research how to implement and improve automated software refactoring tools. However, the results of automated refactoring tools often deviate from the intentions of the implementer. The goal of this project is to propose an open-source refactoring engine and toolkit that can automatically find the best refactoring sequence required for a given software and apply this sequence. Since the tool is work based on compiler principles, it is reliable to be used in practice and has many benefits for software developer companies. Students who participate in the project will learn compiler techniques such as lexing, parsing, source code analysis, and source code transformation. They also learn about software refactoring, search-based software engineering, optimization, software quality, and object-orient metrics.","title":"5 Conclusion"},{"location":"#conflict-of-interest","text":"The project is supported by the (IUST Reverse Engineering Research Laboratory)[http://reverse.iust.ac.ir]. Interested students may continue working on this project to fulfill their final bachelor and master thesis or their internship.","title":"Conflict of interest"},{"location":"#references","text":"[1] T. Parr and K. Fisher, \u201cLL(*): the foundation of the ANTLR parser generator,\u201d Proc. 32nd ACM SIGPLAN Conf. Program. Lang. Des. Implement., pp. 425\u2013436, 2011. [2] M. K. B. Fowler, Refactoring: improving the design of existing code, Second Edi. Addison-Wesley, 2018. [3] M. W. Mkaouer, M. Kessentini, S. Bechikh, M. O\u0301 Cinne\u0301ide, and K. Deb, \u201cOn the use of many quality attributes for software refactoring: a many-objective search-based software engineering approach,\u201d Empir. Softw. Eng., vol. 21, no. 6, pp. 2503\u20132545, Dec. 2016. [4] M. Mohan, D. Greer, and P. McMullan, \u201cTechnical debt reduction using search based automated refactoring,\u201d J. Syst. Softw., vol. 120, pp. 183\u2013194, Oct. 2016. [5] M. Mohan and D. Greer, \u201cUsing a many-objective approach to investigate automated refactoring,\u201d Inf. Softw. Technol., vol. 112, pp. 83\u2013101, Aug. 2019. [6] W. Mkaouer et al., \u201cMany-Objective Software Remodularization Using NSGA-III,\u201d ACM Trans. Softw. Eng. Methodol., vol. 24, no. 3, pp. 1\u201345, May 2015. [7] M. Mohan and D. Greer, \u201cMultiRefactor: automated refactoring to improve software quality,\u201d 2017, pp. 556\u2013572. [8] N. Tsantalis, T. Chaikalis, and A. Chatzigeorgiou, \u201cTen years of JDeodorant: lessons learned from the hunt for smells,\u201d in 2018 IEEE 25th International Conference on Software Analysis, Evolution and Reengineering (SANER), 2018, pp. 4\u201314.","title":"References"},{"location":"#related-links","text":"IUST compiler course official webpage ANTLR slides: PART 1: Introduction ANTLR slides: PART 2: Getting started in Java ANTLR slides: PART 3: Getting started in C#","title":"Related links"},{"location":"#endnotes","text":"[1] https://www.jetbrains.com/idea/ [2] http://www.eclipse.org [3] http://www.netbeans.org [4] https://github.com/mmohan01/MultiRefactor [5] http://sourceforge.net/projects/recoder [6] http://reverse.iust.ac.ir","title":"Endnotes"},{"location":"#download-project-links-for-test","text":"Xerces-J Azureus ArgoUML Apache Ant GanttProject JHotDraw JFreeChart Beaver Apache XML-RPC JRDF XOM JSON JFlex Mango Weka ANTLR","title":"Download Project Links for Test"},{"location":"#faq","text":"For any question please contact m-zakeri@live.com","title":"FAQ"},{"location":"decrease_field_visibility/","text":"Decrease field visibility To implement extract class refactoring based on its actors. Creates a new class and move fields and methods from the old class to the new one __init__ ( self , common_token_stream = None , source_class = None , field_name = None ) special :param common_token_stream: :param source_class: :param field_name: Source code in refactorings\\field_refactorings\\decreasefieldvisibility.py def __init__ ( self , common_token_stream : CommonTokenStream = None , source_class = None , field_name : str = None ): \"\"\" :param common_token_stream: :param source_class: :param field_name: \"\"\" if field_name is None : self . field_name = \"\" else : self . field_name = field_name if source_class is None : self . source_class = \"\" else : self . source_class = source_class if common_token_stream is None : raise ValueError ( 'common_token_stream is None' ) else : self . token_stream_rewriter = TokenStreamRewriter ( common_token_stream ) self . is_source_class = False self . detected_field = None self . detected_method = None self . TAB = \" \\t \" self . NEW_LINE = \" \\n \" self . code = \"\" self . tempdeclarationcode = \"\"","title":"Decrease field visibility"},{"location":"decrease_field_visibility/#decrease-field-visibility","text":"To implement extract class refactoring based on its actors. Creates a new class and move fields and methods from the old class to the new one","title":"Decrease field visibility"},{"location":"decrease_field_visibility/#refactorings.field_refactorings.DecreaseFieldVisibility.DecreaseFieldVisibilityRefactoringListener.__init__","text":":param common_token_stream: :param source_class: :param field_name: Source code in refactorings\\field_refactorings\\decreasefieldvisibility.py def __init__ ( self , common_token_stream : CommonTokenStream = None , source_class = None , field_name : str = None ): \"\"\" :param common_token_stream: :param source_class: :param field_name: \"\"\" if field_name is None : self . field_name = \"\" else : self . field_name = field_name if source_class is None : self . source_class = \"\" else : self . source_class = source_class if common_token_stream is None : raise ValueError ( 'common_token_stream is None' ) else : self . token_stream_rewriter = TokenStreamRewriter ( common_token_stream ) self . is_source_class = False self . detected_field = None self . detected_method = None self . TAB = \" \\t \" self . NEW_LINE = \" \\n \" self . code = \"\" self . tempdeclarationcode = \"\"","title":"__init__()"},{"location":"extract_interface/","text":"Extract interface refactorings.extract_interface.extract_interface","title":"Extract interface"},{"location":"extract_interface/#extract-interface","text":"refactorings.extract_interface.extract_interface","title":"Extract interface"},{"location":"increase_field_visibility/","text":"Increase field visibility Introduction: Increase the visibility of a field from private to package, package to protected or protected to public. Pre and Post Conditions Pre Conditions: 1. User must enter the field's name, and the source class's name for the refactoring in order to increase the target field's visibility. Post Conditions: No specific Post Condition __init__ ( self , common_token_stream = None , source_class = None , field_name = None ) special To implement Increase Field Visibility refactoring based on its actors. Detects the required field and increases/changes its visibility status. Parameters: Name Type Description Default common_token_stream CommonTokenStream A stream of tokens generated by parsing the main file using the ANTLR parser generator None source_class str Name of the class in which the refactoring has to be done None field_name str Name of the field whose visibility status has to be changed None Returns: Type Description No returns Source code in refactorings\\increase_field_visibility.py def __init__ ( self , common_token_stream : CommonTokenStream = None , source_class = None , field_name : str = None ): \"\"\"To implement Increase Field Visibility refactoring based on its actors. Detects the required field and increases/changes its visibility status. Args: common_token_stream (CommonTokenStream): A stream of tokens generated by parsing the main file using the ANTLR parser generator source_class (str): Name of the class in which the refactoring has to be done field_name (str): Name of the field whose visibility status has to be changed Returns: No returns \"\"\" if field_name is None : self . field_name = \"\" else : self . field_name = field_name if source_class is None : self . source_class = \"\" else : self . source_class = source_class if common_token_stream is None : raise ValueError ( 'common_token_stream is None' ) else : self . token_stream_rewriter = TokenStreamRewriter ( common_token_stream ) self . is_source_class = False self . detected_field = None self . detected_method = None self . TAB = \" \\t \" self . NEW_LINE = \" \\n \" self . code = \"\" self . tempdeclarationcode = \"\"","title":"Increase field visibility"},{"location":"increase_field_visibility/#increase-field-visibility","text":"Introduction: Increase the visibility of a field from private to package, package to protected or protected to public. Pre and Post Conditions Pre Conditions: 1. User must enter the field's name, and the source class's name for the refactoring in order to increase the target field's visibility. Post Conditions: No specific Post Condition","title":"Increase field visibility"},{"location":"increase_field_visibility/#refactorings.increase_field_visibility.IncreaseFieldVisibilityRefactoringListener.__init__","text":"To implement Increase Field Visibility refactoring based on its actors. Detects the required field and increases/changes its visibility status. Parameters: Name Type Description Default common_token_stream CommonTokenStream A stream of tokens generated by parsing the main file using the ANTLR parser generator None source_class str Name of the class in which the refactoring has to be done None field_name str Name of the field whose visibility status has to be changed None Returns: Type Description No returns Source code in refactorings\\increase_field_visibility.py def __init__ ( self , common_token_stream : CommonTokenStream = None , source_class = None , field_name : str = None ): \"\"\"To implement Increase Field Visibility refactoring based on its actors. Detects the required field and increases/changes its visibility status. Args: common_token_stream (CommonTokenStream): A stream of tokens generated by parsing the main file using the ANTLR parser generator source_class (str): Name of the class in which the refactoring has to be done field_name (str): Name of the field whose visibility status has to be changed Returns: No returns \"\"\" if field_name is None : self . field_name = \"\" else : self . field_name = field_name if source_class is None : self . source_class = \"\" else : self . source_class = source_class if common_token_stream is None : raise ValueError ( 'common_token_stream is None' ) else : self . token_stream_rewriter = TokenStreamRewriter ( common_token_stream ) self . is_source_class = False self . detected_field = None self . detected_method = None self . TAB = \" \\t \" self . NEW_LINE = \" \\n \" self . code = \"\" self . tempdeclarationcode = \"\"","title":"__init__()"},{"location":"make_field_final/","text":"Make field final MakeFieldFinalRefactoringListener Introduction: Add the final property to a field, so that it never changes once it is initialized. Pre and Post Conditions Pre Conditions: User must enter the field's name and the name of the source class in order to make it final Check if the field exists, then make it final Post Conditions: The value of this field should never be changed in the project __init__ ( self , common_token_stream = None , source_class = None , field_name = None ) special The Main listener which parses the file based on the provided information, using ANTLR parser generator and tokenization methods. Detects the desired field and changes its status to final. Parameters: Name Type Description Default common_token_stream CommonTokenStream A stream of tokens generated by parsing the main file using the ANTLR parser generator None source_class str Name of the class in which the refactoring has to be done None field_name str Name of the field whose final status has to be changed None Returns: Type Description No returns Source code in refactorings\\make_field_final.py def __init__ ( self , common_token_stream : CommonTokenStream = None , source_class = None , field_name : str = None ): \"\"\"The Main listener which parses the file based on the provided information, using ANTLR parser generator and tokenization methods. Detects the desired field and changes its status to final. Args: common_token_stream (CommonTokenStream): A stream of tokens generated by parsing the main file using the ANTLR parser generator source_class (str): Name of the class in which the refactoring has to be done field_name (str): Name of the field whose final status has to be changed Returns: No returns \"\"\" if field_name is None : self . field_name = \"\" else : self . field_name = field_name if source_class is None : self . source_class = \"\" else : self . source_class = source_class if common_token_stream is None : raise ValueError ( 'common_token_stream is None' ) else : self . token_stream_rewriter = TokenStreamRewriter ( common_token_stream ) self . is_source_class = False self . is_final = False","title":"Make field final"},{"location":"make_field_final/#make-field-final","text":"","title":"Make field final"},{"location":"make_field_final/#refactorings.make_field_final.MakeFieldFinalRefactoringListener","text":"Introduction: Add the final property to a field, so that it never changes once it is initialized. Pre and Post Conditions Pre Conditions: User must enter the field's name and the name of the source class in order to make it final Check if the field exists, then make it final Post Conditions: The value of this field should never be changed in the project","title":"MakeFieldFinalRefactoringListener"},{"location":"make_field_final/#refactorings.make_field_final.MakeFieldFinalRefactoringListener.__init__","text":"The Main listener which parses the file based on the provided information, using ANTLR parser generator and tokenization methods. Detects the desired field and changes its status to final. Parameters: Name Type Description Default common_token_stream CommonTokenStream A stream of tokens generated by parsing the main file using the ANTLR parser generator None source_class str Name of the class in which the refactoring has to be done None field_name str Name of the field whose final status has to be changed None Returns: Type Description No returns Source code in refactorings\\make_field_final.py def __init__ ( self , common_token_stream : CommonTokenStream = None , source_class = None , field_name : str = None ): \"\"\"The Main listener which parses the file based on the provided information, using ANTLR parser generator and tokenization methods. Detects the desired field and changes its status to final. Args: common_token_stream (CommonTokenStream): A stream of tokens generated by parsing the main file using the ANTLR parser generator source_class (str): Name of the class in which the refactoring has to be done field_name (str): Name of the field whose final status has to be changed Returns: No returns \"\"\" if field_name is None : self . field_name = \"\" else : self . field_name = field_name if source_class is None : self . source_class = \"\" else : self . source_class = source_class if common_token_stream is None : raise ValueError ( 'common_token_stream is None' ) else : self . token_stream_rewriter = TokenStreamRewriter ( common_token_stream ) self . is_source_class = False self . is_final = False","title":"__init__()"},{"location":"make_field_non_final/","text":"Make field non-final Introduction: Remove the \"final\" property from a field, so that it can be changed after initialization. Pre and Post Conditions Pre Conditions: 1. User must enter the field's name and the name of the source class in order to make it non-final 2. Check if the field exists, then make it non-final Post Conditions: No specific Post Condition __init__ ( self , common_token_stream = None , source_class = None , field_name = None ) special The Main listener which parses the file based on the provided information, using ANTLR parser generator and tokenization methods. Detects the desired field and removes the \"final\" keyword from its properties. !!! args common_token_stream (CommonTokenStream): A stream of tokens generated by parsing the main file using the ANTLR parser generator source_class (str): Name of the class in which the refactoring has to be done field_name (str):Name of the field whose final status has to be changed !!! returns No returns Source code in refactorings\\make_field_non_final.py def __init__ ( self , common_token_stream : CommonTokenStream = None , source_class = None , field_name : str = None ): \"\"\"The Main listener which parses the file based on the provided information, using ANTLR parser generator and tokenization methods. Detects the desired field and removes the \"final\" keyword from its properties. Args: common_token_stream (CommonTokenStream): A stream of tokens generated by parsing the main file using the ANTLR parser generator source_class (str): Name of the class in which the refactoring has to be done field_name (str):Name of the field whose final status has to be changed Returns: No returns \"\"\" if field_name is None : self . field_name = \"\" else : self . field_name = field_name if source_class is None : self . source_class = \"\" else : self . source_class = source_class if common_token_stream is None : raise ValueError ( 'common_token_stream is None' ) else : self . token_stream_rewriter = TokenStreamRewriter ( common_token_stream ) self . is_source_class = False self . is_final = False","title":"Make field non-final"},{"location":"make_field_non_final/#make-field-non-final","text":"Introduction: Remove the \"final\" property from a field, so that it can be changed after initialization. Pre and Post Conditions Pre Conditions: 1. User must enter the field's name and the name of the source class in order to make it non-final 2. Check if the field exists, then make it non-final Post Conditions: No specific Post Condition","title":"Make field non-final"},{"location":"make_field_non_final/#refactorings.make_field_non_final.MakeFieldNonFinalRefactoringListener.__init__","text":"The Main listener which parses the file based on the provided information, using ANTLR parser generator and tokenization methods. Detects the desired field and removes the \"final\" keyword from its properties. !!! args common_token_stream (CommonTokenStream): A stream of tokens generated by parsing the main file using the ANTLR parser generator source_class (str): Name of the class in which the refactoring has to be done field_name (str):Name of the field whose final status has to be changed !!! returns No returns Source code in refactorings\\make_field_non_final.py def __init__ ( self , common_token_stream : CommonTokenStream = None , source_class = None , field_name : str = None ): \"\"\"The Main listener which parses the file based on the provided information, using ANTLR parser generator and tokenization methods. Detects the desired field and removes the \"final\" keyword from its properties. Args: common_token_stream (CommonTokenStream): A stream of tokens generated by parsing the main file using the ANTLR parser generator source_class (str): Name of the class in which the refactoring has to be done field_name (str):Name of the field whose final status has to be changed Returns: No returns \"\"\" if field_name is None : self . field_name = \"\" else : self . field_name = field_name if source_class is None : self . source_class = \"\" else : self . source_class = source_class if common_token_stream is None : raise ValueError ( 'common_token_stream is None' ) else : self . token_stream_rewriter = TokenStreamRewriter ( common_token_stream ) self . is_source_class = False self . is_final = False","title":"__init__()"},{"location":"pull_up_field/","text":"Pull-up field The main function that does the process of pull up field refactoring. Removes the repetitive fields from the subclasses, creates the superclass, and moves the fields to the superclass. Parameters: Name Type Description Default source_filenames(list) A list of file names to be processed required package_name(str) The name of the package in which the refactoring has to be done (contains the classes/superclasses) required class_name(str) Name of the class that the field is pulled up from required field_name(str) Name of the field that has to be refactored required filename_mapping(str) Mapping the file's name to the correct format so that it can be processed required !!! returns No returns Source code in refactorings\\pullup_field.py def pullup_field ( source_filenames : list , package_name : str , class_name : str , field_name : str , filename_mapping = lambda x : ( x [: - 5 ] if x . endswith ( \".java\" ) else x ) + \".java\" ) -> bool : \"\"\"The main function that does the process of pull up field refactoring. Removes the repetitive fields from the subclasses, creates the superclass, and moves the fields to the superclass. Args: source_filenames(list): A list of file names to be processed package_name(str): The name of the package in which the refactoring has to be done (contains the classes/superclasses) class_name(str): Name of the class that the field is pulled up from field_name(str): Name of the field that has to be refactored filename_mapping(str): Mapping the file's name to the correct format so that it can be processed Returns: No returns \"\"\" program = utils2 . get_program ( source_filenames , print_status = True ) print ( program . packages ) if package_name not in program . packages \\ or class_name not in program . packages [ package_name ] . classes \\ or field_name not in program . packages [ package_name ] . classes [ class_name ] . fields : return False _class : utils_listener_fast . Class = program . packages [ package_name ] . classes [ class_name ] if _class . superclass_name is None : return False superclass_name = _class . superclass_name superclass : utils_listener_fast . Class = program . packages [ package_name ] . classes [ superclass_name ] superclass_body_start = utils_listener_fast . TokensInfo ( superclass . parser_context . classBody ()) superclass_body_start . stop = superclass_body_start . start # Start and stop both point to the '{' if field_name in superclass . fields : return False datatype = _class . fields [ field_name ] . datatype fields_to_remove = [] for pn in program . packages : p : utils_listener_fast . Package = program . packages [ pn ] for cn in p . classes : c : utils_listener_fast . Class = p . classes [ cn ] if (( c . superclass_name == superclass_name and c . file_info . has_imported_class ( package_name , superclass_name )) \\ or ( package_name is not None and c . superclass_name == package_name + '.' + superclass_name )) \\ and field_name in c . fields \\ and c . fields [ field_name ] . datatype == datatype : fields_to_remove . append ( c . fields [ field_name ]) if len ( fields_to_remove ) == 0 : return False is_public = False is_protected = True for field in fields_to_remove : field : utils_listener_fast . Field = field is_public = is_public or \"public\" in field . modifiers is_protected = is_protected and ( \"protected\" in field . modifiers or \"private\" in field . modifiers ) rewriter = utils2 . Rewriter ( program , filename_mapping ) rewriter . insert_after ( superclass_body_start , \" \\n \" + ( \"public \" if is_public else ( \"protected \" if is_protected else \"\" )) + datatype + \" \" + field_name + \";\" ) for field in fields_to_remove : if len ( field . neighbor_names ) == 0 : rewriter . replace ( field . get_tokens_info (), \"\" ) # Have to remove the modifiers too, because of the new grammar. for mod_ctx in field . modifiers_parser_contexts : rewriter . replace ( utils_listener_fast . TokensInfo ( mod_ctx ), \"\" ) else : i = field . index_in_variable_declarators var_ctxs = field . all_variable_declarator_contexts if i == 0 : to_remove = utils_listener_fast . TokensInfo ( var_ctxs [ i ]) to_remove . stop = utils_listener_fast . TokensInfo ( var_ctxs [ i + 1 ]) . start - 1 # Include the ',' after it rewriter . replace ( to_remove , \"\" ) else : to_remove = utils_listener_fast . TokensInfo ( var_ctxs [ i ]) to_remove . start = utils_listener_fast . TokensInfo ( var_ctxs [ i - 1 ]) . stop + 1 # Include the ',' before it rewriter . replace ( to_remove , \"\" ) # Add initializer to class constructor if initializer exists in field declaration if field . initializer is not None : _class : utils_listener_fast . Class = program . packages [ field . package_name ] . classes [ field . class_name ] initializer_statement = ( field . name + \" = \" + ( \"new \" + field . datatype + \" \" if field . initializer . startswith ( '{' ) else \"\" ) + field . initializer + \";\" ) has_contructor = False for class_body_decl in _class . parser_context . classBody () . getChildren (): if class_body_decl . getText () in [ '{' , '}' ]: continue member_decl = class_body_decl . memberDeclaration () if member_decl is not None : constructor = member_decl . constructorDeclaration () if constructor is not None : body = constructor . constructorBody # Start token = '{' body_start = utils_listener_fast . TokensInfo ( body ) body_start . stop = body_start . start # Start and stop both point to the '{' rewriter . insert_after ( body_start , \" \\n \" + initializer_statement ) has_contructor = True if not has_contructor : body = _class . parser_context . classBody () body_start = utils_listener_fast . TokensInfo ( body ) body_start . stop = body_start . start # Start and stop both point to the '{' rewriter . insert_after ( body_start , \" \\n \" + _class . name + \"() { \" + initializer_statement + \" }\" ) rewriter . apply () return True","title":"Pull-up field"},{"location":"pull_up_field/#pull-up-field","text":"The main function that does the process of pull up field refactoring. Removes the repetitive fields from the subclasses, creates the superclass, and moves the fields to the superclass. Parameters: Name Type Description Default source_filenames(list) A list of file names to be processed required package_name(str) The name of the package in which the refactoring has to be done (contains the classes/superclasses) required class_name(str) Name of the class that the field is pulled up from required field_name(str) Name of the field that has to be refactored required filename_mapping(str) Mapping the file's name to the correct format so that it can be processed required !!! returns No returns Source code in refactorings\\pullup_field.py def pullup_field ( source_filenames : list , package_name : str , class_name : str , field_name : str , filename_mapping = lambda x : ( x [: - 5 ] if x . endswith ( \".java\" ) else x ) + \".java\" ) -> bool : \"\"\"The main function that does the process of pull up field refactoring. Removes the repetitive fields from the subclasses, creates the superclass, and moves the fields to the superclass. Args: source_filenames(list): A list of file names to be processed package_name(str): The name of the package in which the refactoring has to be done (contains the classes/superclasses) class_name(str): Name of the class that the field is pulled up from field_name(str): Name of the field that has to be refactored filename_mapping(str): Mapping the file's name to the correct format so that it can be processed Returns: No returns \"\"\" program = utils2 . get_program ( source_filenames , print_status = True ) print ( program . packages ) if package_name not in program . packages \\ or class_name not in program . packages [ package_name ] . classes \\ or field_name not in program . packages [ package_name ] . classes [ class_name ] . fields : return False _class : utils_listener_fast . Class = program . packages [ package_name ] . classes [ class_name ] if _class . superclass_name is None : return False superclass_name = _class . superclass_name superclass : utils_listener_fast . Class = program . packages [ package_name ] . classes [ superclass_name ] superclass_body_start = utils_listener_fast . TokensInfo ( superclass . parser_context . classBody ()) superclass_body_start . stop = superclass_body_start . start # Start and stop both point to the '{' if field_name in superclass . fields : return False datatype = _class . fields [ field_name ] . datatype fields_to_remove = [] for pn in program . packages : p : utils_listener_fast . Package = program . packages [ pn ] for cn in p . classes : c : utils_listener_fast . Class = p . classes [ cn ] if (( c . superclass_name == superclass_name and c . file_info . has_imported_class ( package_name , superclass_name )) \\ or ( package_name is not None and c . superclass_name == package_name + '.' + superclass_name )) \\ and field_name in c . fields \\ and c . fields [ field_name ] . datatype == datatype : fields_to_remove . append ( c . fields [ field_name ]) if len ( fields_to_remove ) == 0 : return False is_public = False is_protected = True for field in fields_to_remove : field : utils_listener_fast . Field = field is_public = is_public or \"public\" in field . modifiers is_protected = is_protected and ( \"protected\" in field . modifiers or \"private\" in field . modifiers ) rewriter = utils2 . Rewriter ( program , filename_mapping ) rewriter . insert_after ( superclass_body_start , \" \\n \" + ( \"public \" if is_public else ( \"protected \" if is_protected else \"\" )) + datatype + \" \" + field_name + \";\" ) for field in fields_to_remove : if len ( field . neighbor_names ) == 0 : rewriter . replace ( field . get_tokens_info (), \"\" ) # Have to remove the modifiers too, because of the new grammar. for mod_ctx in field . modifiers_parser_contexts : rewriter . replace ( utils_listener_fast . TokensInfo ( mod_ctx ), \"\" ) else : i = field . index_in_variable_declarators var_ctxs = field . all_variable_declarator_contexts if i == 0 : to_remove = utils_listener_fast . TokensInfo ( var_ctxs [ i ]) to_remove . stop = utils_listener_fast . TokensInfo ( var_ctxs [ i + 1 ]) . start - 1 # Include the ',' after it rewriter . replace ( to_remove , \"\" ) else : to_remove = utils_listener_fast . TokensInfo ( var_ctxs [ i ]) to_remove . start = utils_listener_fast . TokensInfo ( var_ctxs [ i - 1 ]) . stop + 1 # Include the ',' before it rewriter . replace ( to_remove , \"\" ) # Add initializer to class constructor if initializer exists in field declaration if field . initializer is not None : _class : utils_listener_fast . Class = program . packages [ field . package_name ] . classes [ field . class_name ] initializer_statement = ( field . name + \" = \" + ( \"new \" + field . datatype + \" \" if field . initializer . startswith ( '{' ) else \"\" ) + field . initializer + \";\" ) has_contructor = False for class_body_decl in _class . parser_context . classBody () . getChildren (): if class_body_decl . getText () in [ '{' , '}' ]: continue member_decl = class_body_decl . memberDeclaration () if member_decl is not None : constructor = member_decl . constructorDeclaration () if constructor is not None : body = constructor . constructorBody # Start token = '{' body_start = utils_listener_fast . TokensInfo ( body ) body_start . stop = body_start . start # Start and stop both point to the '{' rewriter . insert_after ( body_start , \" \\n \" + initializer_statement ) has_contructor = True if not has_contructor : body = _class . parser_context . classBody () body_start = utils_listener_fast . TokensInfo ( body ) body_start . stop = body_start . start # Start and stop both point to the '{' rewriter . insert_after ( body_start , \" \\n \" + _class . name + \"() { \" + initializer_statement + \" }\" ) rewriter . apply () return True","title":"Pull-up field"},{"location":"pull_up_method/","text":"Pull-up method The main function that does the process of pull up method refactoring. Removes the necessary methods from the subclasses and moves them to a superclass. Parameters: Name Type Description Default source_filenames(list) A list of file names to be processed required package_name(str) The name of the package in which the refactoring has to be done(contains the classes) required class_name(str) Name of the class in which the refactoring has to be done (pulling up the field from here) required method_key(str) Name of the method which needs to be removed from the subclasses/pulled up required filename_mapping(str) Mapping the file's name to the correct format so that it can be processed required Returns: Type Description No returns Source code in refactorings\\pullup_method.py def pullup_method_refactoring ( source_filenames : list , package_name : str , class_name : str , method_key : str , filename_mapping = lambda x : x ): \"\"\"The main function that does the process of pull up method refactoring. Removes the necessary methods from the subclasses and moves them to a superclass. Args: source_filenames(list): A list of file names to be processed package_name(str): The name of the package in which the refactoring has to be done(contains the classes) class_name(str): Name of the class in which the refactoring has to be done (pulling up the field from here) method_key(str): Name of the method which needs to be removed from the subclasses/pulled up filename_mapping(str): Mapping the file's name to the correct format so that it can be processed Returns: No returns \"\"\" program = get_program ( source_filenames ) # getting the program packages _sourceclass = program . packages [ package_name ] . classes [ class_name ] target_class_name = _sourceclass . superclass_name static = 0 removemethod = get_removemethods ( program , package_name , target_class_name , method_key , class_name ) # Similar methods in other classes _targetclass = program . packages [ package_name ] . classes [ target_class_name ] _method_name = program . packages [ package_name ] . classes [ class_name ] . methods [ method_key ] tokens_info = TokensInfo ( _method_name . parser_context ) exps = tokens_info . get_token_index ( tokens_info . token_stream . tokens , tokens_info . start , tokens_info . stop ) # list of class variables that are used in the method if _method_name . is_constructor : return False # if method use param of class body return false for token in exps : if token . text in _sourceclass . fields : return False if bool ( _method_name . body_method_invocations_without_typename ) == True : return False Rewriter_ = Rewriter ( program , filename_mapping ) for remove in removemethod : _methodd = removemethod [ remove ] if _methodd != None : _methodds = _methodd [ 0 ] _method = program . packages [ package_name ] . classes [ remove ] . methods [ str ( _methodds )] _method_token_info = TokensInfo ( _method . parser_context ) Rewriter_ . replace ( _method_token_info , \" \" ) class_tokens_info = TokensInfo ( _targetclass . parser_context ) singlefileelement = SingleFileElement ( _method_name . parser_context , _method_name . filename ) token_stream_rewriter = TokenStreamRewriter ( singlefileelement . get_token_stream ()) strofmethod = token_stream_rewriter . getText ( program_name = token_stream_rewriter . DEFAULT_PROGRAM_NAME , start = tokens_info . start , stop = tokens_info . stop ) Rewriter_ . insert_before ( tokens_info = class_tokens_info , text = strofmethod ) Rewriter_ . apply () # The Method has to be updated anywhere else that it's used for package_names in program . packages : package = program . packages [ package_names ] for class_ in package . classes : _class = package . classes [ class_ ] for method_ in _class . methods : __method = _class . methods [ method_ ] for inv in __method . body_method_invocations : invc = __method . body_method_invocations [ inv ] method_name = method_key [: method_key . find ( '(' )] if ( invc [ 0 ] == method_name & package_names == package_name ): inv_tokens_info = TokensInfo ( inv ) if ( static == 0 ): class_token_info = TokensInfo ( _class . body_context ) Rewriter_ . insert_after_start ( class_token_info , target_class_name + \" \" + str . lower ( target_class_name ) + \"=\" + \"new \" + target_class_name + \"();\" ) Rewriter_ . apply () Rewriter_ . replace ( inv_tokens_info , target_class_name ) Rewriter_ . apply () return True","title":"Pull-up method"},{"location":"pull_up_method/#pull-up-method","text":"The main function that does the process of pull up method refactoring. Removes the necessary methods from the subclasses and moves them to a superclass. Parameters: Name Type Description Default source_filenames(list) A list of file names to be processed required package_name(str) The name of the package in which the refactoring has to be done(contains the classes) required class_name(str) Name of the class in which the refactoring has to be done (pulling up the field from here) required method_key(str) Name of the method which needs to be removed from the subclasses/pulled up required filename_mapping(str) Mapping the file's name to the correct format so that it can be processed required Returns: Type Description No returns Source code in refactorings\\pullup_method.py def pullup_method_refactoring ( source_filenames : list , package_name : str , class_name : str , method_key : str , filename_mapping = lambda x : x ): \"\"\"The main function that does the process of pull up method refactoring. Removes the necessary methods from the subclasses and moves them to a superclass. Args: source_filenames(list): A list of file names to be processed package_name(str): The name of the package in which the refactoring has to be done(contains the classes) class_name(str): Name of the class in which the refactoring has to be done (pulling up the field from here) method_key(str): Name of the method which needs to be removed from the subclasses/pulled up filename_mapping(str): Mapping the file's name to the correct format so that it can be processed Returns: No returns \"\"\" program = get_program ( source_filenames ) # getting the program packages _sourceclass = program . packages [ package_name ] . classes [ class_name ] target_class_name = _sourceclass . superclass_name static = 0 removemethod = get_removemethods ( program , package_name , target_class_name , method_key , class_name ) # Similar methods in other classes _targetclass = program . packages [ package_name ] . classes [ target_class_name ] _method_name = program . packages [ package_name ] . classes [ class_name ] . methods [ method_key ] tokens_info = TokensInfo ( _method_name . parser_context ) exps = tokens_info . get_token_index ( tokens_info . token_stream . tokens , tokens_info . start , tokens_info . stop ) # list of class variables that are used in the method if _method_name . is_constructor : return False # if method use param of class body return false for token in exps : if token . text in _sourceclass . fields : return False if bool ( _method_name . body_method_invocations_without_typename ) == True : return False Rewriter_ = Rewriter ( program , filename_mapping ) for remove in removemethod : _methodd = removemethod [ remove ] if _methodd != None : _methodds = _methodd [ 0 ] _method = program . packages [ package_name ] . classes [ remove ] . methods [ str ( _methodds )] _method_token_info = TokensInfo ( _method . parser_context ) Rewriter_ . replace ( _method_token_info , \" \" ) class_tokens_info = TokensInfo ( _targetclass . parser_context ) singlefileelement = SingleFileElement ( _method_name . parser_context , _method_name . filename ) token_stream_rewriter = TokenStreamRewriter ( singlefileelement . get_token_stream ()) strofmethod = token_stream_rewriter . getText ( program_name = token_stream_rewriter . DEFAULT_PROGRAM_NAME , start = tokens_info . start , stop = tokens_info . stop ) Rewriter_ . insert_before ( tokens_info = class_tokens_info , text = strofmethod ) Rewriter_ . apply () # The Method has to be updated anywhere else that it's used for package_names in program . packages : package = program . packages [ package_names ] for class_ in package . classes : _class = package . classes [ class_ ] for method_ in _class . methods : __method = _class . methods [ method_ ] for inv in __method . body_method_invocations : invc = __method . body_method_invocations [ inv ] method_name = method_key [: method_key . find ( '(' )] if ( invc [ 0 ] == method_name & package_names == package_name ): inv_tokens_info = TokensInfo ( inv ) if ( static == 0 ): class_token_info = TokensInfo ( _class . body_context ) Rewriter_ . insert_after_start ( class_token_info , target_class_name + \" \" + str . lower ( target_class_name ) + \"=\" + \"new \" + target_class_name + \"();\" ) Rewriter_ . apply () Rewriter_ . replace ( inv_tokens_info , target_class_name ) Rewriter_ . apply () return True","title":"Pull-up method"},{"location":"push_down_field/","text":"Push down field The main function that does the process of pull up field refactoring. Adds the necessary fields to the subclasses and removes them from the superclass. Parameters: Name Type Description Default source_filenames(list) A list of file names to be processed required package_name(str) The name of the package in which the refactoring has to be done (contains the superclass) required superclass_name(str) The name of the needed superclass required class_names(str) Name of the classes in which the refactoring has to be done (the classes to push down field from) required field_name(str) Name of the field that has to be refactored required filename_mapping(str) Mapping the file's name to the correct format so that it can be processed required Returns: Type Description bool No returns Source code in refactorings\\pushdown_field.py def pushdown_field ( source_filenames : list , package_name : str , superclass_name : str , field_name : str , class_names : list = [], filename_mapping = lambda x : ( x [: - 5 ] if x . endswith ( \".java\" ) else x ) + \".java\" ) -> bool : \"\"\"The main function that does the process of pull up field refactoring. Adds the necessary fields to the subclasses and removes them from the superclass. Args: source_filenames(list): A list of file names to be processed package_name(str): The name of the package in which the refactoring has to be done (contains the superclass) superclass_name(str): The name of the needed superclass class_names(str): Name of the classes in which the refactoring has to be done (the classes to push down field from) field_name(str): Name of the field that has to be refactored filename_mapping(str): Mapping the file's name to the correct format so that it can be processed Returns: No returns \"\"\" program = utils2 . get_program ( source_filenames , print_status = True ) if package_name not in program . packages \\ or superclass_name not in program . packages [ package_name ] . classes \\ or field_name not in program . packages [ package_name ] . classes [ superclass_name ] . fields : return False superclass : utils_listener_fast . Class = program . packages [ package_name ] . classes [ superclass_name ] for mk in superclass . methods : m : utils_listener_fast . Method = superclass . methods [ mk ] for item in m . body_local_vars_and_expr_names : if isinstance ( item , utils_listener_fast . ExpressionName ): if (( len ( item . dot_separated_identifiers ) == 1 and item . dot_separated_identifiers [ 0 ] == field_name ) or ( len ( item . dot_separated_identifiers ) == 2 and item . dot_separated_identifiers [ 0 ] == \"this\" and item . dot_separated_identifiers [ 1 ] == field_name )): return False # all_derived_classes = [] # Not needed other_derived_classes = [] classes_to_add_to = [] for pn in program . packages : p : utils_listener_fast . Package = program . packages [ pn ] for cn in p . classes : c : utils_listener_fast . Class = p . classes [ cn ] if (( c . superclass_name == superclass_name and c . file_info . has_imported_class ( package_name , superclass_name )) \\ or ( package_name is not None and c . superclass_name == package_name + '.' + superclass_name )): # all_derived_classes.append(c) if len ( class_names ) == 0 or cn in class_names : if field_name in c . fields : return False else : classes_to_add_to . append ( c ) else : other_derived_classes . append ( c ) # Check if the field is used from the superclass or other derived classes for pn in program . packages : p : utils_listener_fast . Package = program . packages [ pn ] for cn in p . classes : c : utils_listener_fast . Class = p . classes [ cn ] has_imported_superclass = c . file_info . has_imported_class ( package_name , superclass_name ) fields_of_superclass_type_or_others = [] for fn in c . fields : f : utils_listener_fast . Field = c . fields [ fn ] if ( f . datatype == superclass_name and has_imported_superclass ) \\ or ( package_name is not None and f . datatype == ( package_name + '.' + superclass_name )): fields_of_superclass_type_or_others . append ( f . name ) if any (( c . file_info . has_imported_class ( o . package_name , o . name ) and f . datatype == o . name ) or f . datatype == ( o . package_name + '.' + o . name ) for o in other_derived_classes ): fields_of_superclass_type_or_others . append ( f . name ) for mk in c . methods : m : utils_listener_fast . Method = c . methods [ mk ] local_vars_of_superclass_type_or_others = [] for item in m . body_local_vars_and_expr_names : if isinstance ( item , utils_listener_fast . LocalVariable ): if ( item . datatype == superclass_name and has_imported_superclass ) \\ or item . datatype == ( package_name + '.' + superclass_name ): local_vars_of_superclass_type_or_others . append ( item . identifier ) if any (( c . file_info . has_imported_class ( o . package_name , o . name ) and item . datatype == o . name ) or item . datatype == ( o . package_name + '.' + o . name ) for o in other_derived_classes ): local_vars_of_superclass_type_or_others . append ( item . identifier ) elif isinstance ( item , utils_listener_fast . ExpressionName ): if item . dot_separated_identifiers [ - 1 ] == field_name \\ and ( ( len ( item . dot_separated_identifiers ) == 2 ) or ( len ( item . dot_separated_identifiers ) == 3 and item . dot_separated_identifiers [ 0 ] == \"this\" ) ) and ( ( item . dot_separated_identifiers [ - 2 ] in local_vars_of_superclass_type_or_others and len ( item . dot_separated_identifiers ) == 2 ) or item . dot_separated_identifiers [ - 2 ] in fields_of_superclass_type_or_others ): return False rewriter = utils2 . Rewriter ( program , filename_mapping ) field = superclass . fields [ field_name ] if len ( field . neighbor_names ) == 0 : rewriter . replace ( field . get_tokens_info (), \"\" ) # Have to remove the modifiers too, because of the new grammar. for mod_ctx in field . modifiers_parser_contexts : rewriter . replace ( utils_listener_fast . TokensInfo ( mod_ctx ), \"\" ) else : i = field . index_in_variable_declarators var_ctxs = field . all_variable_declarator_contexts if i == 0 : to_remove = utils_listener_fast . TokensInfo ( var_ctxs [ i ]) to_remove . stop = utils_listener_fast . TokensInfo ( var_ctxs [ i + 1 ]) . start - 1 # Include the ',' after it rewriter . replace ( to_remove , \"\" ) else : to_remove = utils_listener_fast . TokensInfo ( var_ctxs [ i ]) to_remove . start = utils_listener_fast . TokensInfo ( var_ctxs [ i - 1 ]) . stop + 1 # Include the ',' before it rewriter . replace ( to_remove , \"\" ) is_public = \"public\" in field . modifiers is_protected = \"protected\" in field . modifiers modifier = ( \"public \" if is_public else ( \"protected \" if is_protected else \"\" )) for c in classes_to_add_to : c_body_start = utils_listener_fast . TokensInfo ( c . parser_context . classBody ()) c_body_start . stop = c_body_start . start # Start and stop both point to the '{' rewriter . insert_after ( c_body_start , \" \\n \" + modifier + field . datatype + \" \" + field_name \\ + (( \" = \" + field . initializer ) if field . initializer is not None else \"\" ) + \";\" ) rewriter . apply () return True","title":"Push down field"},{"location":"push_down_field/#push-down-field","text":"The main function that does the process of pull up field refactoring. Adds the necessary fields to the subclasses and removes them from the superclass. Parameters: Name Type Description Default source_filenames(list) A list of file names to be processed required package_name(str) The name of the package in which the refactoring has to be done (contains the superclass) required superclass_name(str) The name of the needed superclass required class_names(str) Name of the classes in which the refactoring has to be done (the classes to push down field from) required field_name(str) Name of the field that has to be refactored required filename_mapping(str) Mapping the file's name to the correct format so that it can be processed required Returns: Type Description bool No returns Source code in refactorings\\pushdown_field.py def pushdown_field ( source_filenames : list , package_name : str , superclass_name : str , field_name : str , class_names : list = [], filename_mapping = lambda x : ( x [: - 5 ] if x . endswith ( \".java\" ) else x ) + \".java\" ) -> bool : \"\"\"The main function that does the process of pull up field refactoring. Adds the necessary fields to the subclasses and removes them from the superclass. Args: source_filenames(list): A list of file names to be processed package_name(str): The name of the package in which the refactoring has to be done (contains the superclass) superclass_name(str): The name of the needed superclass class_names(str): Name of the classes in which the refactoring has to be done (the classes to push down field from) field_name(str): Name of the field that has to be refactored filename_mapping(str): Mapping the file's name to the correct format so that it can be processed Returns: No returns \"\"\" program = utils2 . get_program ( source_filenames , print_status = True ) if package_name not in program . packages \\ or superclass_name not in program . packages [ package_name ] . classes \\ or field_name not in program . packages [ package_name ] . classes [ superclass_name ] . fields : return False superclass : utils_listener_fast . Class = program . packages [ package_name ] . classes [ superclass_name ] for mk in superclass . methods : m : utils_listener_fast . Method = superclass . methods [ mk ] for item in m . body_local_vars_and_expr_names : if isinstance ( item , utils_listener_fast . ExpressionName ): if (( len ( item . dot_separated_identifiers ) == 1 and item . dot_separated_identifiers [ 0 ] == field_name ) or ( len ( item . dot_separated_identifiers ) == 2 and item . dot_separated_identifiers [ 0 ] == \"this\" and item . dot_separated_identifiers [ 1 ] == field_name )): return False # all_derived_classes = [] # Not needed other_derived_classes = [] classes_to_add_to = [] for pn in program . packages : p : utils_listener_fast . Package = program . packages [ pn ] for cn in p . classes : c : utils_listener_fast . Class = p . classes [ cn ] if (( c . superclass_name == superclass_name and c . file_info . has_imported_class ( package_name , superclass_name )) \\ or ( package_name is not None and c . superclass_name == package_name + '.' + superclass_name )): # all_derived_classes.append(c) if len ( class_names ) == 0 or cn in class_names : if field_name in c . fields : return False else : classes_to_add_to . append ( c ) else : other_derived_classes . append ( c ) # Check if the field is used from the superclass or other derived classes for pn in program . packages : p : utils_listener_fast . Package = program . packages [ pn ] for cn in p . classes : c : utils_listener_fast . Class = p . classes [ cn ] has_imported_superclass = c . file_info . has_imported_class ( package_name , superclass_name ) fields_of_superclass_type_or_others = [] for fn in c . fields : f : utils_listener_fast . Field = c . fields [ fn ] if ( f . datatype == superclass_name and has_imported_superclass ) \\ or ( package_name is not None and f . datatype == ( package_name + '.' + superclass_name )): fields_of_superclass_type_or_others . append ( f . name ) if any (( c . file_info . has_imported_class ( o . package_name , o . name ) and f . datatype == o . name ) or f . datatype == ( o . package_name + '.' + o . name ) for o in other_derived_classes ): fields_of_superclass_type_or_others . append ( f . name ) for mk in c . methods : m : utils_listener_fast . Method = c . methods [ mk ] local_vars_of_superclass_type_or_others = [] for item in m . body_local_vars_and_expr_names : if isinstance ( item , utils_listener_fast . LocalVariable ): if ( item . datatype == superclass_name and has_imported_superclass ) \\ or item . datatype == ( package_name + '.' + superclass_name ): local_vars_of_superclass_type_or_others . append ( item . identifier ) if any (( c . file_info . has_imported_class ( o . package_name , o . name ) and item . datatype == o . name ) or item . datatype == ( o . package_name + '.' + o . name ) for o in other_derived_classes ): local_vars_of_superclass_type_or_others . append ( item . identifier ) elif isinstance ( item , utils_listener_fast . ExpressionName ): if item . dot_separated_identifiers [ - 1 ] == field_name \\ and ( ( len ( item . dot_separated_identifiers ) == 2 ) or ( len ( item . dot_separated_identifiers ) == 3 and item . dot_separated_identifiers [ 0 ] == \"this\" ) ) and ( ( item . dot_separated_identifiers [ - 2 ] in local_vars_of_superclass_type_or_others and len ( item . dot_separated_identifiers ) == 2 ) or item . dot_separated_identifiers [ - 2 ] in fields_of_superclass_type_or_others ): return False rewriter = utils2 . Rewriter ( program , filename_mapping ) field = superclass . fields [ field_name ] if len ( field . neighbor_names ) == 0 : rewriter . replace ( field . get_tokens_info (), \"\" ) # Have to remove the modifiers too, because of the new grammar. for mod_ctx in field . modifiers_parser_contexts : rewriter . replace ( utils_listener_fast . TokensInfo ( mod_ctx ), \"\" ) else : i = field . index_in_variable_declarators var_ctxs = field . all_variable_declarator_contexts if i == 0 : to_remove = utils_listener_fast . TokensInfo ( var_ctxs [ i ]) to_remove . stop = utils_listener_fast . TokensInfo ( var_ctxs [ i + 1 ]) . start - 1 # Include the ',' after it rewriter . replace ( to_remove , \"\" ) else : to_remove = utils_listener_fast . TokensInfo ( var_ctxs [ i ]) to_remove . start = utils_listener_fast . TokensInfo ( var_ctxs [ i - 1 ]) . stop + 1 # Include the ',' before it rewriter . replace ( to_remove , \"\" ) is_public = \"public\" in field . modifiers is_protected = \"protected\" in field . modifiers modifier = ( \"public \" if is_public else ( \"protected \" if is_protected else \"\" )) for c in classes_to_add_to : c_body_start = utils_listener_fast . TokensInfo ( c . parser_context . classBody ()) c_body_start . stop = c_body_start . start # Start and stop both point to the '{' rewriter . insert_after ( c_body_start , \" \\n \" + modifier + field . datatype + \" \" + field_name \\ + (( \" = \" + field . initializer ) if field . initializer is not None else \"\" ) + \";\" ) rewriter . apply () return True","title":"Push down field"},{"location":"rename_method/","text":"Rename method Introduction: When the name of a method does not explain what the method does (method's functionality), it needs to be changed. Pre and Post Conditions Pre Conditions: User must enter the existing method's name, The source class's name for the refactoring, and the new method name in order to rename. Check if the method exist, then rename it. Post Conditions: After refactoring, all the old method names in the project should be changed. See whether the method is defined in a superclass or subclass. If so, you must repeat all steps in these classes too. The next method is important for maintaining the functionality of the program during the refactoring process. Create a new method with a new name. Copy the code of the old method to it. Delete all the code in the old method and, instead of it, insert a call for the new method. Find all references to the old method and replace them with references to the new one. Delete the old method. If the old method is part of a public interface, don\u2019t perform this step. Instead, mark the old method as deprecated. __init__ ( self , java_file_path , common_token_stream , scope_class_name , target_method_name , new_name , reference = None ) special The Main listener which parses the file based on the provided information, using ANTLR parser generator and tokenization methods Parameters: Name Type Description Default java_file_path(str) Address path to the test/source file required scope_class_name(str) Name of the class in which the refactoring has to be done required target_method_name(str) Name of the method in which the refactoring has to be done required new_name(str) The new name of the refactored method required Returns: Type Description No returns Source code in refactorings\\rename_method.py def __init__ ( self , java_file_path , common_token_stream , scope_class_name , target_method_name , new_name , reference = None ): \"\"\"The Main listener which parses the file based on the provided information, using ANTLR parser generator and tokenization methods Args: java_file_path(str): Address path to the test/source file scope_class_name(str): Name of the class in which the refactoring has to be done target_method_name(str): Name of the method in which the refactoring has to be done new_name(str): The new name of the refactored method Returns: No returns \"\"\" self . file_path = java_file_path self . token_stream = common_token_stream self . token_stream_rewriter = TokenStreamRewriter ( common_token_stream ) self . class_name = scope_class_name self . method_name = target_method_name self . new_method_name = new_name self . in_class = False self . changed = False self . reference = reference","title":"Rename method"},{"location":"rename_method/#rename-method","text":"Introduction: When the name of a method does not explain what the method does (method's functionality), it needs to be changed. Pre and Post Conditions Pre Conditions: User must enter the existing method's name, The source class's name for the refactoring, and the new method name in order to rename. Check if the method exist, then rename it. Post Conditions: After refactoring, all the old method names in the project should be changed. See whether the method is defined in a superclass or subclass. If so, you must repeat all steps in these classes too. The next method is important for maintaining the functionality of the program during the refactoring process. Create a new method with a new name. Copy the code of the old method to it. Delete all the code in the old method and, instead of it, insert a call for the new method. Find all references to the old method and replace them with references to the new one. Delete the old method. If the old method is part of a public interface, don\u2019t perform this step. Instead, mark the old method as deprecated.","title":"Rename method"},{"location":"rename_method/#refactorings.rename_method.RenameMethodListener.__init__","text":"The Main listener which parses the file based on the provided information, using ANTLR parser generator and tokenization methods Parameters: Name Type Description Default java_file_path(str) Address path to the test/source file required scope_class_name(str) Name of the class in which the refactoring has to be done required target_method_name(str) Name of the method in which the refactoring has to be done required new_name(str) The new name of the refactored method required Returns: Type Description No returns Source code in refactorings\\rename_method.py def __init__ ( self , java_file_path , common_token_stream , scope_class_name , target_method_name , new_name , reference = None ): \"\"\"The Main listener which parses the file based on the provided information, using ANTLR parser generator and tokenization methods Args: java_file_path(str): Address path to the test/source file scope_class_name(str): Name of the class in which the refactoring has to be done target_method_name(str): Name of the method in which the refactoring has to be done new_name(str): The new name of the refactored method Returns: No returns \"\"\" self . file_path = java_file_path self . token_stream = common_token_stream self . token_stream_rewriter = TokenStreamRewriter ( common_token_stream ) self . class_name = scope_class_name self . method_name = target_method_name self . new_method_name = new_name self . in_class = False self . changed = False self . reference = reference","title":"__init__()"}]}